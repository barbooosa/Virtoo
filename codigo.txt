require('dotenv').config()
const express = require('express')
const mongoose = require('mongoose')
const bcrypt = require('bcrypt')
const jwt = require('jsonwebtoken')
const app = express()
const port = 3333

//config Json
app.use(express.json())

//MOdels
const User = require('./models/User.js')

app.get('/', (req, res) => {
    res.status(200).json({msg:'Bem vindo!!!'})
});

//credenciais
const dbUser = process.env.DB_USER
const dbPassword = process.env.DB_PASS



// Private Route

app.get("/user/:id", checkToken, async(req,res)=>{
    const id = req.params.id

    //check if user exist
    const user = await User.findById(id,'-password')

    if(!user){
        return res.status(404).json({msg:"Usuario nao encontrado"})
    }
    
    res.status(200).json({ user })
})

function checkToken(req, res, next) {

    const authHeader = req.headers['authorization']
    const token = authHeader && authHeader.split(" ")[1]

    if(!token){
        return res.status(401).json({msg:"Não permitido!"})
    }
    
    try{
        const secret = process.env.SECRET
        jwt.verify(token,secret)
        next()
    }catch{
        res.status(400).json({msg:"Token inválido"})
    }
}


//Register
app.post('/auth/register' , async (req,res)=>{
    const {name, email, password, confirmpassword} = req.body
    
    //validações
    if(!name){
        return res.status(422).json({msg:"O nome é obrigatorio"})
    }
    if(!email){
        return res.status(422).json({msg:"O email é obrigatorio"})
    }
    if(!password){
        return res.status(422).json({msg:"A senha é obrigatoria"})
    }
    if(password !== confirmpassword){
        return res.status(422).json({msg:"As senhas nao estao iguais"})
    }
    //check user 
    const userExists = await User.findOne({ email: email})

    if(userExists) {
        return res.status(422).json({msg:"Por favor utilize outro email"})

    }

    //create password
    const salt = await bcrypt.genSalt(12)
    const passwordHash = await bcrypt.hash(password, salt)

    // create user
    const user = new User({
        name,
        email,
        password: passwordHash,
    })
    
    try{

        await user.save()

        res.status(201).json({msg: 'Usuário criado!'})
        
        
    }catch(error){
        console.log(error)

        res
            .status(500)
            .json({
                msg: "Aconteceu um erro no servidor , tente novamente mais tarde"
            })
    }
     
})


//Login user
app.post("/auth/login", async (req,res)=>{
    const {email, password} = req.body
    
    //validations
    if(!email){
        return res.status(422).json({msg:"O email é obrigatorio"})
    }
    if(!password){
        return res.status(422).json({msg:"A senha é obrigatoria"})
    }

    //check if user exists
    const user = await User.findOne({email: email})

    if(!user) {
        return res.status(404).json({msg: 'Usuário não encontrado'})
    }

    //check if  password match
    const checkpassword = await bcrypt.compare(password, user.password)

    if(!checkpassword){
        return res.status(422).json({msg:"Senha incorreta!"})
    }

    try {
        const secret = process.env.SECRET

        const token = jwt.sign(
            {
                id: user.id,
            },
            secret,
        )
        res.status(200).json({msg:" Logado com sucesso", token})
    }   catch(err){
        console.log(error)
        
        res.status(500).json({
            msg: 'Aconteceu um erro no servidor, tente novamente mais tarde!',
        })   
    }
})


// mongodb+srv://${dbUser}<password>@cluster0.ba1zoi5.mongodb.net/
mongoose.connect(
    `mongodb+srv://${dbUser}:${dbPassword}@cluster0.ba1zoi5.mongodb.net/`,
).then(() => {
    app.listen(port)
    console.log("ta conectado no banco de dados")
})
.catch((err) => console.log(err))
